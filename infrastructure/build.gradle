plugins {
    id 'java-conventions'
    id 'jacoco-report-aggregation'
    id 'application'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.flywaydb.flyway' version '10.18.2'
}

group = 'tech.willeei.admin.catalogo.infrastructure'


bootJar {
    archiveBaseName.set('application.jar')
    destinationDirectory.set(file("${rootProject.buildDir}/libs"))
}

dependencies {
    implementation(project(":domain"))
    implementation(project(":application"))

    implementation('com.google.cloud:google-cloud-storage:2.43.1')
    implementation('com.google.guava:guava:33.3.1-jre')

    implementation('mysql:mysql-connector-java:8.0.33')

    implementation('org.springdoc:springdoc-openapi-webmvc-core:1.8.0')
    implementation('org.springdoc:springdoc-openapi-ui:1.8.0')

    implementation('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }

    implementation('org.springframework.boot:spring-boot-starter-undertow')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-amqp')

    implementation('com.fasterxml.jackson.module:jackson-module-afterburner')

    testImplementation('org.flywaydb:flyway-core')
    testImplementation('org.flywaydb:flyway-mysql')

    implementation('org.yaml:snakeyaml:2.3') {
        version {strictly('2.3')}
    }

    testImplementation 'org.springframework.amqp:spring-rabbit-test:2.4.17'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testImplementation(project(path: ':domain', configuration: 'testClasses'))
    testImplementation('org.testcontainers:testcontainers:1.20.2')
    testImplementation('org.testcontainers:mysql:1.20.2')
    testImplementation('org.testcontainers:junit-jupiter:1.20.2')

    testRuntimeOnly('com.h2database:h2')
}

flyway {
    url = System.getenv('FLYWAY_DB') ?: 'jdbc:mysql://localhost:3306/adm_videos'
    user = System.getenv('FLYWAY_USER') ?: 'root'
    password = System.getenv('FLYWAY_PASS') ?: '9655'
    cleanDisabled = false
}

test {
    useJUnitPlatform()
    doFirst {
        testClassesDirs = files(testClassesDirs.files.sort { fileOne, fileTwo ->
            if (fileOne.name.contains('RabbitEventServiceTest')) {
                return -1
            } else if (fileTwo.name.contains('RabbitEventServiceTest')) {
                return 1
            } else {
                return 0
            }
        })
    }
}

testCodeCoverageReport {
    reports {
        xml {
            enabled true
            destination file("${rootProject.rootDir}/build/reports/jacoco/test/jacocoTestReport.xml")
        }

        html {
            enabled true
            destination file("${rootProject.rootDir}/build/reports/jacoco/test/")
        }
    }
}

tasks.named('jacocoTestReport') {
    dependsOn tasks.named('testCodeCoverageReport', JacocoReport)
}